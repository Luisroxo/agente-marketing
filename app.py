"""
ü§ñ Agente de IA para Marketing - MVP
Vers√£o inicial do sistema para an√°lise de dados e gera√ß√£o de planos de marketing
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import os
import sys

# Adicionar o diret√≥rio raiz ao path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from utils.data_processor import DataProcessor
    from analysis.basic_analysis import BasicAnalyzer
    from templates.report_generator import ReportGenerator
    from api.google_sheets import google_sheets_data_loader, create_sample_google_form_data
    from utils.helpers import generate_sample_data, show_dataframe_info, DataQualityChecker
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")
    st.stop()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Agente de IA - Marketing",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    st.title("ü§ñ Agente de IA para Marketing")
    st.markdown("### An√°lise inteligente de dados para estrat√©gias de marketing eficazes")
    
    # Sidebar
    with st.sidebar:
        st.header("üìä Configura√ß√µes")
        
        # Sele√ß√£o do tipo de an√°lise
        analysis_type = st.selectbox(
            "Tipo de An√°lise",
            ["An√°lise B√°sica", "An√°lise de Sentimentos", "Gera√ß√£o de Personas", "Plano Completo"]
        )
        
        # Upload de arquivos
        st.subheader("üìÅ Upload de Dados")
        
        data_source = st.radio(
            "Fonte dos dados:",
            ["Upload de arquivo", "Google Sheets", "Dados de exemplo"]
        )
        
        uploaded_file = None
        
        if data_source == "Upload de arquivo":
            uploaded_file = st.file_uploader(
                "Escolha um arquivo CSV ou Excel",
                type=['csv', 'xlsx', 'xls'],
                help="Fa√ßa upload dos dados de pesquisa do Google Forms ou dados offline"
            )
        
        elif data_source == "Google Sheets":
            st.info("üìä Configure o Google Sheets na se√ß√£o abaixo")
        
        else:  # Dados de exemplo
            st.info("üìã Usando dados de exemplo para demonstra√ß√£o")
        
        # Op√ß√µes avan√ßadas
        if st.checkbox("Op√ß√µes Avan√ßadas"):
            st.slider("N√∫mero de Clusters (Personas)", 2, 10, 3)
            st.multiselect("Colunas para An√°lise", ["Todas"], default=["Todas"])
    
    # √Årea principal
    df = None
    
    # Carregar dados baseado na fonte selecionada
    with st.sidebar:
        data_source = st.radio(
            "Fonte dos dados:",
            ["Upload de arquivo", "Google Sheets", "Dados de exemplo"]
        )
        
        if data_source == "Upload de arquivo":
            uploaded_file = st.file_uploader(
                "Escolha um arquivo CSV ou Excel",
                type=['csv', 'xlsx', 'xls'],
                help="Fa√ßa upload dos dados de pesquisa do Google Forms ou dados offline"
            )
            if uploaded_file is not None:
                df = load_data(uploaded_file)
        
        elif data_source == "Google Sheets":
            df = google_sheets_data_loader()
        
        else:  # Dados de exemplo
            if st.button("üìã Carregar Dados de Exemplo"):
                df = generate_sample_data()
                st.success("‚úÖ Dados de exemplo carregados!")
    
    if df is not None:
        try:
            # Verificar qualidade dos dados
            quality_checker = DataQualityChecker(df)
            quality_info = quality_checker.check_quality()
            
            st.success(f"‚úÖ Dados carregados: {len(df)} registros")
            
            # Mostrar qualidade dos dados
            if quality_info["quality_score"] < 60:
                st.warning(f"‚ö†Ô∏è Qualidade dos dados: {quality_info['quality_score']}/100")
            else:
                st.info(f"üìä Qualidade dos dados: {quality_info['quality_score']}/100")
            
            # Tabs para diferentes visualiza√ß√µes
            tab1, tab2, tab3, tab4 = st.tabs(["üìà Dados", "üîç An√°lise", "üë§ Personas", "üìÑ Relat√≥rio"])
            
            with tab1:
                show_data_overview(df, quality_info)
            
            with tab2:
                show_analysis(df, analysis_type)
            
            with tab3:
                show_personas(df)
            
            with tab4:
                show_report_generation(df)
                
        except Exception as e:
            st.error(f"‚ùå Erro ao processar dados: {str(e)}")
            st.info("üí° Verifique se o arquivo est√° no formato correto")
    
    else:
        # P√°gina inicial sem dados
        show_welcome_page()

def load_data(uploaded_file):
    """Carregar dados do arquivo uploadado"""
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None

def show_welcome_page():
    """P√°gina de boas-vindas"""
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        ## üéØ Como Usar
        
        1. **üìÅ Upload**: Fa√ßa upload de seus dados de pesquisa (CSV ou Excel)
        2. **üîç An√°lise**: Escolha o tipo de an√°lise desejada
        3. **üìä Insights**: Visualize os resultados e insights autom√°ticos
        4. **üìÑ Relat√≥rio**: Gere um plano de marketing personalizado
        
        ### üìã Formatos Suportados
        - Respostas do Google Forms (CSV)
        - Planilhas Excel personalizadas
        - Dados de pesquisas offline
        
        ### üöÄ Funcionalidades MVP
        - ‚úÖ An√°lise descritiva b√°sica
        - ‚úÖ Visualiza√ß√µes interativas
        - ‚úÖ Detec√ß√£o autom√°tica de padr√µes
        - ‚úÖ Gera√ß√£o de relat√≥rio inicial
        """)
        
        # Exemplo de dados
        if st.button("üìã Ver Exemplo de Dados"):
            show_sample_data()

def show_data_overview(df, quality_info=None):
    """Mostrar vis√£o geral dos dados"""
    st.subheader("üìä Vis√£o Geral dos Dados")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total de Registros", len(df))
    
    with col2:
        st.metric("Colunas", len(df.columns))
    
    with col3:
        st.metric("Dados √önicos", len(df.drop_duplicates()))
    
    with col4:
        missing_percentage = (df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100
        st.metric("Dados Faltantes", f"{missing_percentage:.1f}%")
    
    # Mostrar qualidade dos dados se dispon√≠vel
    if quality_info:
        st.subheader("üîç Qualidade dos Dados")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if quality_info["issues"]:
                st.warning("‚ö†Ô∏è **Problemas encontrados:**")
                for issue in quality_info["issues"]:
                    st.write(f"‚Ä¢ {issue}")
            else:
                st.success("‚úÖ Nenhum problema cr√≠tico encontrado")
        
        with col2:
            if quality_info["recommendations"]:
                st.info("üí° **Recomenda√ß√µes:**")
                for rec in quality_info["recommendations"]:
                    st.write(f"‚Ä¢ {rec}")
    
    # Preview dos dados
    st.subheader("üëÄ Preview dos Dados")
    st.dataframe(df.head(10), use_container_width=True)
    
    # Informa√ß√µes das colunas
    st.subheader("üìã Informa√ß√µes das Colunas")
    col_info = pd.DataFrame({
        'Coluna': df.columns,
        'Tipo': df.dtypes,
        'Valores √önicos': [df[col].nunique() for col in df.columns],
        'Nulos': [df[col].isnull().sum() for col in df.columns],
        'Nulos (%)': [(df[col].isnull().sum() / len(df) * 100).round(2) for col in df.columns]
    })
    st.dataframe(col_info, use_container_width=True)

def show_analysis(df, analysis_type):
    """Mostrar an√°lises dos dados"""
    st.subheader(f"üîç {analysis_type}")
    
    if analysis_type == "An√°lise B√°sica":
        show_basic_analysis(df)
    elif analysis_type == "An√°lise de Sentimentos":
        show_sentiment_analysis(df)
    elif analysis_type == "Gera√ß√£o de Personas":
        show_persona_generation(df)
    else:
        st.info("Funcionalidade em desenvolvimento...")

def show_basic_analysis(df):
    """An√°lise b√°sica dos dados"""
    # Detectar colunas num√©ricas e categ√≥ricas
    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    
    if numeric_cols:
        st.subheader("üìà An√°lise Num√©rica")
        selected_numeric = st.selectbox("Selecione uma coluna num√©rica", numeric_cols)
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_hist = px.histogram(df, x=selected_numeric, title=f"Distribui√ß√£o de {selected_numeric}")
            st.plotly_chart(fig_hist, use_container_width=True)
        
        with col2:
            fig_box = px.box(df, y=selected_numeric, title=f"Box Plot de {selected_numeric}")
            st.plotly_chart(fig_box, use_container_width=True)
    
    if categorical_cols:
        st.subheader("üìä An√°lise Categ√≥rica")
        selected_categorical = st.selectbox("Selecione uma coluna categ√≥rica", categorical_cols)
        
        # Contagem de valores
        value_counts = df[selected_categorical].value_counts().head(10)
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_bar = px.bar(x=value_counts.index, y=value_counts.values, 
                           title=f"Top 10 valores de {selected_categorical}")
            st.plotly_chart(fig_bar, use_container_width=True)
        
        with col2:
            fig_pie = px.pie(values=value_counts.values, names=value_counts.index,
                           title=f"Distribui√ß√£o de {selected_categorical}")
            st.plotly_chart(fig_pie, use_container_width=True)

def show_sentiment_analysis(df):
    """An√°lise de sentimentos (placeholder)"""
    st.info("üîß Funcionalidade em desenvolvimento")
    st.markdown("""
    ### Pr√≥ximas implementa√ß√µes:
    - An√°lise de sentimentos em texto livre
    - Detec√ß√£o de temas principais
    - Classifica√ß√£o autom√°tica de feedback
    """)

def show_persona_generation(df):
    """Gera√ß√£o de personas (placeholder)"""
    st.info("üîß Funcionalidade em desenvolvimento")
    st.markdown("""
    ### Pr√≥ximas implementa√ß√µes:
    - Clustering autom√°tico de usu√°rios
    - Gera√ß√£o de personas baseadas em dados
    - Perfis detalhados com caracter√≠sticas
    """)

def show_personas(df):
    """Tab de personas"""
    st.subheader("üë§ An√°lise de Personas")
    st.info("Funcionalidade ser√° implementada na Fase 2")

def show_report_generation(df):
    """Tab de gera√ß√£o de relat√≥rio"""
    st.subheader("üìÑ Gera√ß√£o de Relat√≥rio")
    
    if st.button("üöÄ Gerar Relat√≥rio B√°sico"):
        with st.spinner("Gerando relat√≥rio..."):
            report = generate_basic_report(df)
            st.success("‚úÖ Relat√≥rio gerado!")
            
            # Mostrar relat√≥rio
            st.markdown(report)
            
            # Op√ß√£o de download
            st.download_button(
                label="üì• Download do Relat√≥rio",
                data=report,
                file_name=f"relatorio_marketing_{datetime.now().strftime('%Y%m%d_%H%M')}.md",
                mime="text/markdown"
            )

def generate_basic_report(df):
    """Gerar relat√≥rio b√°sico"""
    # Usar o ReportGenerator
    report_gen = ReportGenerator()
    report_gen.set_data(df)
    
    # Gerar an√°lises b√°sicas
    analyzer = BasicAnalyzer()
    analyzer.set_data(df)
    insights = analyzer.generate_insights()
    
    # Gerar relat√≥rio completo
    full_report = report_gen.generate_full_report()
    
    return full_report

def show_sample_data():
    """Mostrar dados de exemplo"""
    sample_data = {
        'Nome': ['Jo√£o Silva', 'Maria Santos', 'Pedro Costa'],
        'Idade': [25, 34, 28],
        'Cidade': ['S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte'],
        'Interesse': ['Tecnologia', 'Moda', 'Esportes'],
        'Satisfacao': [8, 9, 7],
        'Recomendaria': ['Sim', 'Sim', 'Talvez']
    }
    
    st.subheader("üìã Exemplo de Estrutura de Dados")
    st.dataframe(pd.DataFrame(sample_data))
    
    st.markdown("""
    **Colunas sugeridas para seus dados:**
    - Dados demogr√°ficos (idade, cidade, g√™nero)
    - Prefer√™ncias e interesses
    - Avalia√ß√µes e feedback
    - Comportamento de compra
    - Canais de comunica√ß√£o preferidos
    """)

if __name__ == "__main__":
    main()